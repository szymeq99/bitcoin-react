{"version":3,"sources":["components/CryptoList.jsx","components/Crypto.jsx","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","cryptoArray","map","arrayElement","className","key","currency","class","last","symbol","Crypto","getCryptoData","axios","get","then","res","crypto","data","convertedCryptoArray","i","newCryptoObj","prevCryptoObj","state","undefined","push","setState","filteredCrypto","filter","event","trimedValue","filterInput","value","trim","toUpperCase","currentCrypto","console","log","filteredCryptoAPP","includes","this","setInterval","type","placeholder","onChange","ref","input","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAqBeA,EAlBI,SAACC,GAGhB,IAAID,EAAaC,EAAMC,YAAYC,KAAI,SAAAC,GACnC,OACJ,wBAAIC,UAAU,OAAOC,IAAKF,EAAaG,UAAvC,cAA4D,0BAAMF,UAAWD,EAAaI,OAAQJ,EAAaK,MAA/G,IAA6HL,EAAaG,SAA1I,IAAqJH,EAAaM,WAIlK,OACI,wBAAIL,UAAU,eACTL,I,iBCgFEW,E,YAvFX,aAAc,IAAD,8BACT,+CASJC,cAAgB,WACZC,IAAMC,IAAN,qCACGC,MAAK,SAAAC,GACJ,IAAMC,EAASD,EAAIE,KACfC,EAAuB,GACvBC,EAAI,EAKR,IAAI,IAAId,KAAOW,EAAO,CAElB,IAAII,EAAeJ,EAAOX,GACtBgB,EAAgB,EAAKC,MAAMrB,YAAYkB,QAGtBI,IAAlBF,EACIA,EAAcb,KAAOY,EAAaZ,KACjCY,EAAab,MAAQ,OACdc,EAAcb,KAAOY,EAAaZ,KACzCY,EAAab,MAAQ,QAGrBa,EAAab,MAAQ,OAIzBa,EAAab,MAAQ,OAIzBa,EAAad,SAAWD,EACxBa,EAAqBM,KAAKJ,GAC1BD,IAGJ,EAAKM,SAAS,CAACxB,YAAYiB,EAAsBQ,eAAgBR,QA9C5D,EAmDbS,OAAS,SAACC,GAEN,IAAIC,EAAc,EAAKC,YAAYC,MAAMC,OAAOC,cAC5CC,EAAgB,EAAKZ,MAAMrB,YAE/BkC,QAAQC,IAAIP,GAEZ,IAAIQ,EAAoBH,EAAcP,QAAO,SAAAX,GACzC,OAAOA,EAAOV,SAASgC,SAAST,MAIpC,EAAKJ,SAAS,CAACC,eAAgBW,KA5D/B,EAAKf,MAAQ,CACTrB,YAAa,GACbyB,eAAgB,IALX,E,iFAoEQ,IAAD,OAChBa,KAAK5B,gBAEH6B,aAAY,WACR,EAAK7B,kBACN,O,+BAGA,IAAD,OAEJ,OACI,yBAAKP,UAAU,UACX,2BAAOA,UAAU,QAAQqC,KAAK,OAAOC,YAAY,iBAAcC,SAAUJ,KAAKZ,OAAQiB,IAAK,SAAAC,GAAK,OAAG,EAAKf,YAAce,KACtH,kBAAC,EAAD,CAAY5C,YAAasC,KAAKjB,MAAMI,sB,GAnF/BoB,IAAMC,W,MCQZC,MATf,WACE,OACE,yBAAK5C,UAAU,OACb,4BAAQA,UAAU,UAAlB,WACA,kBAAC,EAAD,QCIc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.5f34db94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst CryptoList = (props) => {\r\n    // console.log(props.cryptoArray)\r\n\r\n    let CryptoList = props.cryptoArray.map(arrayElement => {\r\n        return (\r\n    <li className=\"list\" key={arrayElement.currency}>Last rate: <span className={arrayElement.class}>{arrayElement.last}</span> {arrayElement.currency} {arrayElement.symbol}</li>\r\n        )\r\n    }) \r\n\r\n    return (\r\n        <ul className=\"crypto-list\">\r\n            {CryptoList}\r\n\r\n        </ul>\r\n    );\r\n\r\n}\r\n\r\nexport default CryptoList;","import React from 'react';\r\nimport CryptoList from './CryptoList';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Crypto extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            cryptoArray: [],\r\n            filteredCrypto: [],\r\n        }\r\n    }\r\n    \r\n\r\n    getCryptoData = () => {\r\n        axios.get(`https://blockchain.info/pl/ticker`)\r\n          .then(res => {\r\n            const crypto = res.data;\r\n            let convertedCryptoArray = [];\r\n            let i = 0\r\n\r\n            // console.log(res)\r\n            // console.log(crypto)\r\n\r\n            for(let key in crypto){\r\n\r\n                let newCryptoObj = crypto[key];\r\n                let prevCryptoObj = this.state.cryptoArray[i];\r\n                // console.log(prevCryptoObj)\r\n\r\n                if(prevCryptoObj !== undefined){\r\n                    if(prevCryptoObj.last > newCryptoObj.last){\r\n                        newCryptoObj.class = \"blue\";\r\n                    } else if (prevCryptoObj.last < newCryptoObj.last){\r\n                        newCryptoObj.class = \"green\";\r\n                    }\r\n                    else {\r\n                        newCryptoObj.class = \"blue\";\r\n\r\n                    }\r\n                } else  {\r\n                    newCryptoObj.class = \"blue\";\r\n                }\r\n\r\n\r\n                newCryptoObj.currency = key;\r\n                convertedCryptoArray.push(newCryptoObj);\r\n                i++;\r\n            }\r\n\r\n            this.setState({cryptoArray:convertedCryptoArray, filteredCrypto: convertedCryptoArray})\r\n            \r\n          });\r\n    }\r\n\r\n    filter = (event) => {\r\n        // console.log(event.target.value);\r\n        let trimedValue = this.filterInput.value.trim().toUpperCase();\r\n        let currentCrypto = this.state.cryptoArray;\r\n\r\n        console.log(trimedValue)\r\n\r\n        let filteredCryptoAPP = currentCrypto.filter(crypto => {\r\n            return crypto.currency.includes(trimedValue);\r\n        })\r\n        \r\n\r\n        this.setState({filteredCrypto: filteredCryptoAPP})\r\n        \r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getCryptoData();\r\n\r\n          setInterval(()=>{\r\n              this.getCryptoData()\r\n          }, 5000)\r\n      }\r\n\r\n    render(){\r\n        // console.log(this.state)\r\n        return(\r\n            <div className=\"crypto\">\r\n                <input className=\"input\" type=\"text\" placeholder=\"Wpisz skrÃ³t\" onChange={this.filter} ref={input=> this.filterInput = input}/>\r\n                <CryptoList cryptoArray={this.state.filteredCrypto} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Crypto;","import React from 'react';\nimport Crypto from './components/Crypto';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">Bitcoin</header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}